# TextRank算法

TextRank算法是一种用于文本的基于图的排序算法，通过把文本分割成若干组成单元（句子或词语），构建节点间的相似度矩阵，然后运用PageRank算法计算每个节点的重要性得分，从而实现关键词提取和文本摘要的功能。
TextRank算法的数学原理是基于PageRank算法的，PageRank算法是一种用于网页排名的算法，它假设一个网页的重要性与它被其他网页引用的次数成正比，也就是说，一个网页被越多的其他网页链接，它就越重要。PageRank算法用一个有向图来表示网页之间的链接关系，每个网页是一个节点，每个链接是一条有向边，边上有一个权重值，表示链接的强度。PageRank算法的目标是计算每个节点的稳定状态下的访问概率，也就是每个节点的重要性得分。
PageRank算法的数学原理可以用以下公式表示：
$$
PR(u) = (1-d) + d \sum_{v \in In(u)} \frac{PR(v)}{Out(v)}
$$
其中，PR(u)表示节点u的重要性得分，d是一个阻尼系数（通常取0.85），In(u)表示指向节点u的所有节点集合，Out(v)表示节点v指出的所有节点数量。
TextRank算法将PageRank算法应用到文本中，将文本中的句子或词语视为节点，将句子或词语之间的相似度视为边的权重值。TextRank算法用以下公式表示：
$$
WS(V_i) = (1-d) + d \sum_{V_j \in In(V_i)} \frac{w_{ji}}{\sum_{V_k \in Out(V_j)} w_{jk}} WS(V_j)
$$
其中，WS(Vi)表示节点Vi（句子或词语）的重要性得分，d是一个阻尼系数（通常取0.85），In(Vi)表示指向节点Vi的所有节点集合，Out(Vj)表示节点Vj指出的所有节点集合，wji表示从节点Vj到节点Vi的边的权重值（相似度）。

``

# 余弦相似度算法

余弦相似度算法是一种用于计算两个向量之间夹角的余弦值的方法，用于衡量两个向量的方向相似程度。余弦相似度算法可以用于计算文本相似度，即将文本转换为数值向量，然后计算两个向量的余弦值。余弦相似度的值在-1到1之间，越接近1表示越相似，越接近-1表示越不相似。
$$
\cos\theta = \frac{\overrightarrow{a} \cdot \overrightarrow{b}}{|\overrightarrow{a}| \cdot |\overrightarrow{b}|}
$$
其中，a和b是两个向量，θ是它们之间的夹角，∣a∣和∣b∣是它们的模长，a⋅b是它们的点积。余弦相似度的值在-1到1之间，越接近1表示越相似，越接近-1表示越不相似。

介绍使用余弦相似度计算两段文本的相似度。

思路：1、分词；2、列出所有词；3、分词编码；4、词频向量化；5、套用余弦函数计量两个句子的相似度。



# 其他文本相似度计算方法

**基于统计学的计算方法**，如词频-逆文档频率（TF-IDF），Jaccard相似度等，这些方法没有考虑文本的句子结构信息和语义信息，计算的结果有时会与人对自然语言的理解不相符合。
**基于语义理解的计算方法**，如基于WordNet的词语相似度，基于知网或同义词词林的词语相似度等，这些方法依赖于具有层次结构关系的语义词典，计算结果相对准确，与人对自然语言的理解较为符合。
**基于深度学习的计算方法**，如词嵌入（word embeddings），句子嵌入（sentence embeddings）等，这些方法利用神经网络模型学习文本的高维向量表示，能够捕捉文本的语义和语用信息，计算结果更加精确和鲁棒。